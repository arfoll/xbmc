AUTOGENERATED_MAKEFILES=@OUTPUT_FILES@
BIN_DIRS=	\
	guilib \
	guilib/common \
	guilib/tinyXML \
	xbmc \
	xbmc/addons \
	xbmc/cdrip \
	xbmc/cores \
	xbmc/cores/DllLoader \
	xbmc/cores/DllLoader/exports \
	xbmc/cores/DllLoader/exports/util \
	xbmc/cores/dvdplayer \
	xbmc/cores/paplayer \
	xbmc/cores/meegoplayer \
	xbmc/cores/AudioRenderers \
	xbmc/cores/VideoRenderers \
	xbmc/cores/VideoRenderers/VideoShaders \
	xbmc/cores/ExternalPlayer \
	xbmc/cores/playercorefactory \
	xbmc/FileSystem \
	xbmc/FileSystem/MusicDatabaseDirectory \
	xbmc/FileSystem/VideoDatabaseDirectory \
	xbmc/karaoke \
	xbmc/lib/libjsonrpc \
	xbmc/lib/libhttpapi \
	xbmc/lib/libPython \
	xbmc/lib/libPython/xbmcmodule \
	xbmc/lib/libRTV \
	xbmc/lib/libscrobbler \
	xbmc/lib/libUPnP \
	xbmc/lib/libXDAAP \
	xbmc/lib/sqLite \
	xbmc/lib/libsquish \
	xbmc/visualizations \
	xbmc/screensavers \
	xbmc/utils \
	xbmc/settings \
	xbmc/linux \
	xbmc/osx \
	xbmc/posix

XBMCTEX_DIRS= \
	tools/TexturePacker

LIB_DIRS=\
	xbmc/lib/cximage-6.0 \
	xbmc/lib/libexif \
	xbmc/lib/libhdhomerun \
        xbmc/lib/libid3tag \
	xbmc/lib/libapetag \
	xbmc/lib/libPython/linux \
	lib/cpluff \
	lib/xbmc-dll-symbols \
	lib/jsoncpp/jsoncpp/src/lib_json
ifeq ($(findstring osx,$(ARCH)), osx)
LIB_DIRS+=lib/libmicrohttpd
endif

SS_DIRS=\
	xbmc/screensavers/rsxs-0.9/xbmc

VIS_DIRS=\
	xbmc/visualizations/OpenGLSpectrum \
	xbmc/visualizations/WaveForm \
	xbmc/visualizations/XBMCProjectM
ifeq ($(findstring osx,$(ARCH)), osx)
VIS_DIRS+=xbmc/visualizations/iTunes
endif
ifneq (@BUILD_GOOM@,1)
VIS_DIRS+=xbmc/visualizations/Goom
endif


CONFLUENCE_MEDIA=addons/skin.confluence/media

SKIN_DIRS=\
	$(CONFLUENCE_MEDIA)

LIVE_DIRS=\
	tools/XBMCLive

DIRS= $(BIN_DIRS) $(XBMCTEX_DIRS) $(DVDPCODECS_DIRS) $(PAPCODECS_DIRS) \
	$(LIB_DIRS) $(SS_DIRS) $(VIS_DIRS) $(SKIN_DIRS) $(LIVE_DIRS)

LIBS=@LIBS@
CFLAGS=@CFLAGS@
CXXFLAGS=@CXXFLAGS@
LDFLAGS=@LDFLAGS@
INCLUDES=$(sort @INCLUDES@)

CLEAN_FILES=xbmc.bin xbmc-xrandr

DISTCLEAN_FILES=config.h config.log config.status tools/Linux/xbmc.sh \
        tools/Linux/xbmc-standalone.sh autom4te.cache config.h.in~ \
        xbmc/lib/libPython/Python/Include/pyconfig.h \
        xbmc/lib/libPython/Python/configure.lineno \
        xbmc/lib/libPython/Python/libpython2.4.so.1.0 \
        system/libcpluff-$(ARCH).so

all : Makefile externals xbmc.bin xbmc-xrandr skins

include Makefile.include

.PHONY : dllloader exports visualizations screensavers eventclients papcodecs \
	dvdpcodecs imagelib codecs externals force skins

# hack targets to keep build system up to date
Makefile : config.status $(addsuffix .in, $(AUTOGENERATED_MAKEFILES))
	@echo "Regenerating Makefiles..."
	@./config.status &> /dev/null
	@echo "done"

config.status: configure
	@echo "Build system configuration is stale."
	@echo "Please (re)run configure."
	@false

configure: configure.in
	@echo 'configure is outdated, regenerating...'
	@./bootstrap

# skin textures
skins: tools/TexturePacker/TexturePacker force
ifneq (arm, $(ARCH))
	 $(MAKE) -C $(CONFLUENCE_MEDIA)
endif

guilib/guilib.a: force
	$(MAKE) -C guilib
guilib/common/gui_common.a: force
	$(MAKE) -C guilib/common
guilib/tinyXML/tinyxml.a: force
	$(MAKE) -C guilib/tinyXML
xbmc/xbmc.a: force
	$(MAKE) -C xbmc
xbmc/cdrip/cdrip.a: force
	$(MAKE) -C xbmc/cdrip
xbmc/cores/cores.a: force
	$(MAKE) -C xbmc/cores
xbmc/cores/DllLoader/dllloader.a: force
	$(MAKE) -C xbmc/cores/DllLoader/
xbmc/cores/DllLoader/exports/exports.a: force
	$(MAKE) -C xbmc/cores/DllLoader/exports
xbmc/cores/DllLoader/exports/util/exports_utils.a: force
	$(MAKE) -C xbmc/cores/DllLoader/exports/util
xbmc/cores/dvdplayer/DVDPlayer.a: force
	$(MAKE) -C xbmc/cores/dvdplayer
xbmc/cores/paplayer/paplayer.a: force papcodecs
	$(MAKE) -C xbmc/cores/paplayer
xbmc/cores/AudioRenderers/audiorenderers.a: force
	$(MAKE) -C xbmc/cores/AudioRenderers
xbmc/cores/VideoRenderers/VideoRenderer.a: force
	$(MAKE) -C xbmc/cores/VideoRenderers
xbmc/cores/VideoRenderers/VideoShaders/VideoShaders.a: force
	$(MAKE) -C xbmc/cores/VideoRenderers/VideoShaders
xbmc/cores/ExternalPlayer/ExternalPlayer.a: force
	$(MAKE) -C xbmc/cores/ExternalPlayer
xbmc/cores/meegoplayer/MeegoPlayer.a: force
	$(MAKE) -C xbmc/cores/meegoplayer
xbmc/cores/playercorefactory/playercorefactory.a: force
	$(MAKE) -C xbmc/cores/playercorefactory
xbmc/FileSystem/filesystem.a: force
	$(MAKE) -C xbmc/FileSystem
xbmc/FileSystem/MusicDatabaseDirectory/musicdatabasedirectory.a: force
	$(MAKE) -C xbmc/FileSystem/MusicDatabaseDirectory
xbmc/FileSystem/VideoDatabaseDirectory/videodatabasedirectory.a: force
	$(MAKE) -C xbmc/FileSystem/VideoDatabaseDirectory
xbmc/karaoke/karaoke.a: force
	$(MAKE) -C xbmc/karaoke
xbmc/lib/libPython/python.a: force
	$(MAKE) -C xbmc/lib/libPython
xbmc/lib/libPython/xbmcmodule/xbmcmodule.a: force
	$(MAKE) -C xbmc/lib/libPython/xbmcmodule
xbmc/lib/libscrobbler/scrobbler.a: force
	$(MAKE) -C xbmc/lib/libscrobbler
xbmc/lib/libRTV/librtv-@ARCH@.a: force
	$(MAKE) -C xbmc/lib/libRTV
xbmc/lib/libUPnP/libupnp-@ARCH@.a: force
	$(MAKE) -C xbmc/lib/libUPnP
xbmc/lib/libXDAAP/libxdaap-@ARCH@.a: force
	$(MAKE) -C xbmc/lib/libXDAAP
lib/jsoncpp/jsoncpp/src/lib_json/libjsoncpp.a: force
	$(MAKE) -C lib/jsoncpp/jsoncpp/src/lib_json
xbmc/lib/libjsonrpc/libjsonrpc.a: force
	$(MAKE) -C xbmc/lib/libjsonrpc
xbmc/lib/libhttpapi/libhttpapi.a: force
	$(MAKE) -C xbmc/lib/libhttpapi
xbmc/lib/sqLite/sqllite.a: force
	$(MAKE) -C xbmc/lib/sqLite
xbmc/lib/libsquish/libsquish-@ARCH@.a: force
	$(MAKE) -C xbmc/lib/libsquish
xbmc/linux/linux.a: force
	$(MAKE) -C xbmc/linux
xbmc/posix/posix.a: force
	$(MAKE) -C xbmc/posix
xbmc/addons/addons.a: force
	$(MAKE) -C xbmc/addons
xbmc/settings/settings.a: force
	$(MAKE) -C xbmc/settings
xbmc/utils/utils.a: force
	$(MAKE) -C xbmc/utils
xbmc/osx/osx.a: force
	$(MAKE) -C xbmc/osx
xbmc/lib/libapetag/.libs/libapetag.a: force
	$(MAKE) -C xbmc/lib/libapetag
lib/cpluff/libcpluff/.libs/libcpluff.a: force
	$(MAKE) -C lib/cpluff/libcpluff
system/libcpluff-$(ARCH).so: lib/cpluff/libcpluff/.libs/libcpluff.a
	cp lib/cpluff/libcpluff/.libs/libcpluff.so $@
lib/xbmc-dll-symbols/dll-symbols.a: force
	$(MAKE) -C lib/xbmc-dll-symbols
lib/libmicrohttpd/src/daemon/.libs/libmicrohttpd.a: force
	$(MAKE) -C lib/libmicrohttpd

exports:
	$(MAKE) xbmc/cores/DllLoader/exports/exports.a
	$(MAKE) xbmc/cores/DllLoader/exports/util/exports_utils.a
	$(MAKE) -C xbmc/cores/DllLoader/exports wrapper.def
dllloader: exports
	$(MAKE) xbmc/cores/DllLoader/dllloader.a
visualizations: exports
ifneq (arm, $(ARCH))
	$(MAKE) -C xbmc/visualizations/OpenGLSpectrum
	$(MAKE) -C xbmc/visualizations/WaveForm
	$(MAKE) -C xbmc/visualizations/XBMCProjectM
ifeq ($(findstring osx,$(ARCH)), osx)
	$(MAKE) -C xbmc/visualizations/iTunes
endif
ifneq (@BUILD_GOOM@,1)
ifeq ($(or $(findstring powerpc-linux,$(ARCH)),$(findstring powerpc64-linux,$(ARCH))),)
	$(MAKE) -C xbmc/visualizations/Goom
endif
endif
endif
screensavers: exports
ifneq (arm, $(ARCH))
	$(MAKE) -C xbmc/screensavers/rsxs-0.9/xbmc
endif
libpython: dllloader
	$(MAKE) -C xbmc/lib/libPython
	$(MAKE) -C xbmc/lib/libPython/xbmcmodule
python: dllloader
	$(MAKE) -C xbmc/lib/libPython/linux
eventclients:
libexif: dllloader
	$(MAKE) -C xbmc/lib/libexif
libhdhomerun: dllloader
	$(MAKE) -C xbmc/lib/libhdhomerun
libid3tag: dllloader
	$(MAKE) -C xbmc/lib/libid3tag
imagelib: dllloader
	$(MAKE) -C xbmc/lib/cximage-6.0

codecs: papcodecs dvdpcodecs
ifeq ($(findstring osx,$(ARCH)), osx)
libs: libhdhomerun libid3tag imagelib libexif python system/libcpluff-$(ARCH).so
else
libs: libhdhomerun libid3tag imagelib libexif python system/libcpluff-$(ARCH).so
endif
externals: codecs libs python visualizations screensavers

xcode_depends: \
	codecs libs python visualizations screensavers eventclients skins \
	xbmc/lib/libsquish/libsquish-@ARCH@.a \
	xbmc/lib/libapetag/.libs/libapetag.a \
	xbmc/lib/libRTV/librtv-@ARCH@.a \
	xbmc/lib/libXDAAP/libxdaap-@ARCH@.a \
	xbmc/lib/libjsonrpc/libjsonrpc.a \
	xbmc/lib/libhttpapi/libhttpapi.a \
	lib/jsoncpp/jsoncpp/src/lib_json/libjsoncpp.a \
	lib/libmicrohttpd/src/daemon/.libs/libmicrohttpd.a

# platform independend objects
OBJSXBMC=	\
	xbmc/xbmc.a \
	xbmc/addons/addons.a \
	xbmc/cores/playercorefactory/playercorefactory.a \
	xbmc/cores/dvdplayer/DVDPlayer.a \
	xbmc/cores/paplayer/paplayer.a \
	xbmc/cores/VideoRenderers/VideoRenderer.a \
	xbmc/cores/VideoRenderers/VideoShaders/VideoShaders.a \
	guilib/guilib.a \
	guilib/common/gui_common.a \
	guilib/tinyXML/tinyxml.a \
	xbmc/cdrip/cdrip.a \
	xbmc/cores/cores.a \
	xbmc/lib/libPython/python.a \
	xbmc/cores/DllLoader/dllloader.a \
	xbmc/cores/AudioRenderers/audiorenderers.a \
	xbmc/cores/ExternalPlayer/ExternalPlayer.a \
	xbmc/cores/meegoplayer/MeegoPlayer.a \
	xbmc/FileSystem/filesystem.a \
	xbmc/FileSystem/MusicDatabaseDirectory/musicdatabasedirectory.a \
	xbmc/FileSystem/VideoDatabaseDirectory/videodatabasedirectory.a \
	xbmc/karaoke/karaoke.a \
	xbmc/lib/libPython/xbmcmodule/xbmcmodule.a \
	xbmc/lib/libscrobbler/scrobbler.a \
	xbmc/lib/libRTV/librtv-@ARCH@.a \
	xbmc/lib/libUPnP/libupnp-@ARCH@.a \
	xbmc/lib/libXDAAP/libxdaap-@ARCH@.a \
	xbmc/lib/libjsonrpc/libjsonrpc.a \
	lib/jsoncpp/jsoncpp/src/lib_json/libjsoncpp.a \
	xbmc/lib/libhttpapi/libhttpapi.a \
	xbmc/lib/sqLite/sqllite.a \
	xbmc/lib/libsquish/libsquish-@ARCH@.a \
	xbmc/lib/libapetag/.libs/libapetag.a \
	lib/xbmc-dll-symbols/dll-symbols.a \
	xbmc/settings/settings.a

ifeq (@HAVE_XBMC_NONFREE@,1)
OBJSXBMC+= \
	xbmc/lib/libXBMS/libxbms-@ARCH@.a \
	xbmc/lib/UnrarXLib/UnrarXLib.a
endif

# platform dependend objects
ifeq ($(findstring osx,$(ARCH)), osx)
OBJSXBMC += \
	xbmc/osx/osx.a \
	lib/libSDL-OSX/libSDL-@ARCH@.a \
	lib/libSDL-OSX/libSDL_mixer-@ARCH@.a \
	lib/libmicrohttpd/src/daemon/.libs/libmicrohttpd.a
else
OBJSXBMC += \
	xbmc/posix/posix.a
endif

DYNOBJSXBMC= \
	xbmc/linux/linux.a \
	xbmc/utils/utils.a \
	xbmc/cores/DllLoader/exports/util/exports_utils.a \
	xbmc/cores/DllLoader/exports/exports.a

ifeq (arm, $(ARCH))
# Force external python2.5 for now!
LIBS +=-lpython2.5
endif

xbmc.bin: $(OBJSXBMC) $(DYNOBJSXBMC)
ifeq ($(findstring osx,$(ARCH)), osx)
	$(CXX) $(LDFLAGS) -o xbmc.bin -Wl,-all_load,-ObjC $(DYNOBJSXBMC) $(OBJSXBMC) $(LIBS) -rdynMeegoamic
else
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o xbmc.bin -Wl,--whole-archive $(DYNOBJSXBMC) -Wl,--no-whole-archive $(OBJSXBMC) $(LIBS) -rdynamic
endif

xbmc-xrandr: xbmc-xrandr.c
ifeq ($(findstring osx,$(ARCH)), osx)
	# xbmc-xrandr.c gets picked up by the default make rules
	#  so only exclude it for osx builds
	@echo "excluding xbmc-xrandr"
else
	$(CC) $(CFLAGS) $(LDFLAGS) -o xbmc-xrandr xbmc-xrandr.c -lXrandr -lXrender -lX11 
endif

tools/XBMCTex/XBMCTex:
ifeq ($(findstring osx,$(ARCH)), osx)
	# hack this for now
	$(MAKE) -C tools/XBMCTex -f Makefile.osx
else
	$(MAKE) -C tools/XBMCTex/
endif

tools/TexturePacker/TexturePacker: guilib/guilib.a xbmc/lib/libsquish/libsquish-@ARCH@.a
	$(MAKE) -C tools/TexturePacker/

livedatas:
	$(MAKE) -C tools/XBMCLive

install-bin: xbmc.bin # developement convenience target
	sudo install -D xbmc.bin $(DESTDIR)$(libdir)/xbmc

ifeq ($(findstring osx,$(ARCH)), osx)
	# TODO: add osx install
else
install: install-binaries install-arch install-datas

install-binaries: install-scripts
	@echo "Copying XBMC binary to $(DESTDIR)$(libdir)/xbmc/xbmc.bin"
	@install -D xbmc.bin $(DESTDIR)$(libdir)/xbmc/xbmc.bin
	@install -D xbmc-xrandr $(DESTDIR)$(libdir)/xbmc/xbmc-xrandr
	@echo "You can run XBMC with the command 'xbmc'"
endif

install-arch:
	@# Arch dependent files
	@find system addons -regextype posix-extended -type f -not -iregex ".*svn.*|.*script\.module\..*" -iregex ".*$(ARCH).*|.*\.vis|.*\.xbs|.*python.*\.zip" -exec install -D "{}" $(DESTDIR)$(libdir)/xbmc/"{}" \; -printf " -- %-75.75f\r"
	@cp -r addons/script.module.pil $(DESTDIR)$(libdir)/xbmc/addons/
	@cp -r addons/script.module.pysqlite $(DESTDIR)$(libdir)/xbmc/addons/

install-scripts:
	@install -D tools/Linux/xbmc.sh $(DESTDIR)$(bindir)/xbmc
	@install -D tools/Linux/xbmc-standalone.sh $(DESTDIR)$(bindir)/xbmc-standalone
	@install -D -m 0644 tools/Linux/FEH.py $(DESTDIR)$(datarootdir)/xbmc/FEH.py
	@install -D -m 0644 tools/Linux/xbmc-xsession.desktop $(DESTDIR)$(datarootdir)/xsessions/XBMC.desktop

install-datas: install-scripts
	@echo "Copying support and legal files..."
	@for FILE in `ls README.linux LICENSE.GPL *.txt`; do \
		install -D -m 0644 "$$FILE" "$(DESTDIR)$(docdir)/$$FILE"; done
	@echo "Done!"
	@echo "Copying system files to $(DESTDIR)$(datarootdir)/xbmc"
	@# Arch independent files
	@find addons language media sounds userdata system -regextype posix-extended -type f -not -iregex ".*script\.module\..*|.*$(ARCH).*|.*\.vis|.*\.xbs|.*svn.*|.*\.so|.*\.dll|.*\.pyd|.*python.*\.zip" -exec install -D -m 0644 "{}" $(DESTDIR)$(datarootdir)/xbmc/"{}" \; -printf " -- %-75.75f\r"
	@# Icons and links
	@mkdir -p $(DESTDIR)$(datarootdir)/applications
	@cp -a tools/Linux/xbmc.desktop $(DESTDIR)$(datarootdir)/applications/
	@install -D -m 0644 tools/Linux/xbmc-48x48.png $(DESTDIR)$(datadir)/icons/hicolor/48x48/apps/xbmc.png
	@install -D -m 0644 media/icon.png $(DESTDIR)$(datadir)/icons/hicolor/256x256/apps/xbmc.png
	@test -z "$(DESTDIR)" && gtk-update-icon-cache -f -q -t $(datadir)/icons/hicolor || :

install-livedatas: livedatas
	@echo "Install Live CD datas..."
	@mkdir -p $(DESTDIR)$(bindir)
	@install -D tools/XBMCLive/diskmounter $(DESTDIR)$(bindir)/diskmounter
	@install -D tools/XBMCLive/installXBMC $(DESTDIR)$(bindir)/installXBMC
	@install -D tools/XBMCLive/runXBMC $(DESTDIR)$(bindir)/runXBMC
	@install -D tools/XBMCLive/setAlsaVolumes $(DESTDIR)$(bindir)/setAlsaVolumes

uninstall:
	@echo "Removing XBMC..."
	@rm -rf $(DESTDIR)$(libdir)/xbmc
	@rm -rf $(DESTDIR)$(datarootdir)/xbmc $(DESTDIR)$(bindir)/xbmc
	@rm -rf $(DESTDIR)$(bindir)/xbmc-standalone
	@rm -rf $(DESTDIR)$(datarootdir)/xsessions/XBMC.desktop
	@echo "Done!"

reallyclean:
	@echo " This will delete ALL unversioned files in"; \
	 echo " your XBMC source tree. If you aren't sure"; \
	 echo " you want to do this, answer anything but"; \
	 echo " 'Y' (case sensitive) to the following."; \
	 echo " DISCLAIMER: Team XBMC is NOT responsible"; \
	 echo " for ANYTHING lost if you execute this command!"; \
	 echo -n " Damnserious? (Y/*) "; \
	 read -n1 PROMPT; \
	 if [[ "$$PROMPT" = "Y" ]]; then \
		SVNV=$$(svnversion -n | cut -d':' -f1); _IFS=$$IFS; IFS=$$'\t\n'; \
		for i in `svn st --no-ignore | grep ^[I\?] | cut -d' ' -f7-`; do \
			if [[ $${i:(-4)} != "diff" && $${i:(-5)} != "patch" ]]; then \
				echo "  Deleting $$i"; \
				rm -rf "$$i"; \
			fi; \
		done; \
		IFS=$$_IFS; \
		echo " Recovering any missing files."; \
		svn up -r $${SVNV/M/} | sed -e "s/.*'\(.*\)'/  \1/p" -e d; \
		echo " Done."; \
		echo " The following files may need reverted (svn revert <file>)"; \
		svn st | sed -e "s/^M */  /p" -e d; \
	 else \
	 	echo; \
	 fi

clean-xbmc.bin:
	rm -f xbmc.bin
	for d in $(BIN_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-xbmctex:
	for d in $(XBMCTEX_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-dvdpcodecs: 
	for d in $(DVDPCODECS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-papcodecs:
	for d in $(PAPCODECS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-libs: 
	for d in $(LIB_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-screensavers: 
	for d in $(SS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-visualisations:
	for d in $(VIS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done

clean-codecs: clean-dvdpcodecs clean-papcodecs

clean-externals: clean-codecs clean-eventclients clean-xbmctex clean-libs \
	clean-screensavers clean-visualisations


